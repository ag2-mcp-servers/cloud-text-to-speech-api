# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:02:04+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AudioEncoding(Enum):
    AUDIO_ENCODING_UNSPECIFIED = 'AUDIO_ENCODING_UNSPECIFIED'
    LINEAR16 = 'LINEAR16'
    MP3 = 'MP3'
    MP3_64_KBPS = 'MP3_64_KBPS'
    OGG_OPUS = 'OGG_OPUS'
    MULAW = 'MULAW'
    ALAW = 'ALAW'


class AudioConfig(BaseModel):
    audioEncoding: Optional[AudioEncoding] = Field(
        None, description='Required. The format of the audio byte stream.'
    )
    effectsProfileId: Optional[List[str]] = Field(
        None,
        description="Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.",
    )
    pitch: Optional[float] = Field(
        None,
        description='Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.',
    )
    sampleRateHertz: Optional[int] = Field(
        None,
        description="Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.",
    )
    speakingRate: Optional[float] = Field(
        None,
        description='Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.',
    )
    volumeGainDb: Optional[float] = Field(
        None,
        description="Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.",
    )


class ReportedUsage(Enum):
    REPORTED_USAGE_UNSPECIFIED = 'REPORTED_USAGE_UNSPECIFIED'
    REALTIME = 'REALTIME'
    OFFLINE = 'OFFLINE'


class CustomVoiceParams(BaseModel):
    model: Optional[str] = Field(
        None,
        description='Required. The name of the AutoML model that synthesizes the custom voice.',
    )
    reportedUsage: Optional[ReportedUsage] = Field(
        None, description='Optional. The usage of the synthesized audio to be reported.'
    )


class GoogleCloudTexttospeechV1beta1SynthesizeLongAudioMetadata(BaseModel):
    progressPercentage: Optional[float] = Field(
        None,
        description='The progress of the most recent processing update in percentage, ie. 70.0%.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class SynthesisInput(BaseModel):
    ssml: Optional[str] = Field(
        None,
        description='The SSML document to be synthesized. The SSML document must be valid and well-formed. Otherwise the RPC will fail and return google.rpc.Code.INVALID_ARGUMENT. For more information, see [SSML](https://cloud.google.com/text-to-speech/docs/ssml).',
    )
    text: Optional[str] = Field(None, description='The raw text to be synthesized.')


class SynthesizeLongAudioMetadata(BaseModel):
    progressPercentage: Optional[float] = Field(
        None,
        description='The progress of the most recent processing update in percentage, ie. 70.0%.',
    )
    startTime: Optional[str] = Field(
        None, description='Time when the request was received.'
    )


class EnableTimePointingEnum(Enum):
    TIMEPOINT_TYPE_UNSPECIFIED = 'TIMEPOINT_TYPE_UNSPECIFIED'
    SSML_MARK = 'SSML_MARK'


class Timepoint(BaseModel):
    markName: Optional[str] = Field(
        None, description='Timepoint name as received from the client within `` tag.'
    )
    timeSeconds: Optional[float] = Field(
        None,
        description='Time offset in seconds from the start of the synthesized audio.',
    )


class SsmlGender(Enum):
    SSML_VOICE_GENDER_UNSPECIFIED = 'SSML_VOICE_GENDER_UNSPECIFIED'
    MALE = 'MALE'
    FEMALE = 'FEMALE'
    NEUTRAL = 'NEUTRAL'


class Voice(BaseModel):
    languageCodes: Optional[List[str]] = Field(
        None,
        description='The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. "en-US", "es-419", "cmn-tw").',
    )
    name: Optional[str] = Field(
        None,
        description='The name of this voice. Each distinct voice has a unique name.',
    )
    naturalSampleRateHertz: Optional[int] = Field(
        None, description='The natural sample rate (in hertz) for this voice.'
    )
    ssmlGender: Optional[SsmlGender] = Field(
        None, description='The gender of this voice.'
    )


class VoiceSelectionParams(BaseModel):
    customVoice: Optional[CustomVoiceParams] = Field(
        None,
        description='The configuration for a custom voice. If [CustomVoiceParams.model] is set, the service will choose the custom voice matching the specified configuration.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. "en-US". This should not include a script tag (e.g. use "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn\'t a Canadian voice available), or even a different language, e.g. using "nb" (Norwegian Bokmal) instead of "no" (Norwegian)".',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.',
    )
    ssmlGender: Optional[SsmlGender] = Field(
        None,
        description='The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ListVoicesResponse(BaseModel):
    voices: Optional[List[Voice]] = Field(None, description='The list of voices.')


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class SynthesizeLongAudioRequest(BaseModel):
    audioConfig: Optional[AudioConfig] = Field(
        None, description='Required. The configuration of the synthesized audio.'
    )
    input: Optional[SynthesisInput] = Field(
        None,
        description='Required. The Synthesizer requires either plain text or SSML as input.',
    )
    outputGcsUri: Optional[str] = Field(
        None,
        description='Specifies a Cloud Storage URI for the synthesis results. Must be specified in the format: `gs://bucket_name/object_name`, and the bucket must already exist.',
    )
    voice: Optional[VoiceSelectionParams] = Field(
        None, description='The desired voice of the synthesized audio.'
    )


class SynthesizeSpeechRequest(BaseModel):
    audioConfig: Optional[AudioConfig] = Field(
        None, description='Required. The configuration of the synthesized audio.'
    )
    enableTimePointing: Optional[List[EnableTimePointingEnum]] = Field(
        None, description='Whether and what timepoints are returned in the response.'
    )
    input: Optional[SynthesisInput] = Field(
        None,
        description='Required. The Synthesizer requires either plain text or SSML as input.',
    )
    voice: Optional[VoiceSelectionParams] = Field(
        None, description='Required. The desired voice of the synthesized audio.'
    )


class SynthesizeSpeechResponse(BaseModel):
    audioConfig: Optional[AudioConfig] = Field(
        None, description='The audio metadata of `audio_content`.'
    )
    audioContent: Optional[str] = Field(
        None,
        description='The audio data bytes encoded as specified in the request, including the header for encodings that are wrapped in containers (e.g. MP3, OGG_OPUS). For LINEAR16 audio, we include the WAV header. Note: as with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.',
    )
    timepoints: Optional[List[Timepoint]] = Field(
        None,
        description="A link between a position in the original request input and a corresponding time in the output audio. It's only supported via `` of SSML input.",
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )
